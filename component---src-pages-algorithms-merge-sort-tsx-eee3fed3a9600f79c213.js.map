{"version":3,"sources":["webpack:///./src/containers/MergeSortVisualizer/MergeSortVisualizer.tsx","webpack:///./src/pages/algorithms/merge-sort.tsx"],"names":["MergeSortVisualizer","useState","arr","setArray","startedVisualization","setStartedVisualization","setVisualizationCompleted","value","children","treeHead","setTree","setTreePointer","tree","leftIndex","rightIndex","mainIndex","a","pointer","left","right","sleep","merge","leftArr","leftSize","rightArr","rightSize","i","j","k","mergeSort","size","console","log","mid","Math","round","slice","startMergeSort","length","generateRandomArr","newArray","genRandomArray","useEffect","renderNode","values","className","map","index","cx","Button","variant","color","onClick","disabled","MergeSortPage","data","codeMatch","useMemo","getMarkdownCodeSnippets","Layout","Header","SortVisualizerPageCreator","title","code","visualizerComponent","query"],"mappings":"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","file":"component---src-pages-algorithms-merge-sort-tsx-eee3fed3a9600f79c213.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport sleep from \"../../lib/sleep\"\r\nimport cx from \"classnames\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport { genRandomArray } from \"../../utils/array.util\";\r\n\r\ninterface Tree {\r\n    value: number[];\r\n    children: TreeValue | null,\r\n    pointer?: number;\r\n}\r\ninterface TreeValue {\r\n    left: Tree | null;\r\n    right: Tree | null;\r\n}\r\nexport default function MergeSortVisualizer() {\r\n    const [arr, setArray] = useState<number[]>([])\r\n    const [currentPivotIndex, setPivotIndex] = useState(-1)\r\n    const [leftIndex, setLeftIndex] = useState(-1)\r\n    const [rightIndex, setRightIndex] = useState(-1)\r\n    const [startedVisualization, setStartedVisualization] = useState(false)\r\n    const [visualizationCompleted, setVisualizationCompleted] = useState(false)\r\n    const [swapping, setSwapping] = useState(false);\r\n    const [swapLeft, setSwapLeft] = useState(-1);\r\n    const [swapRight, setSwapRight] = useState(-1);\r\n    const timeout = 1000;\r\n\r\n    const [treeHead, setTree] = useState<Tree>({ value: [], children: null });\r\n\r\n    const setTreePointer = async (tree: Tree, leftIndex: number, rightIndex: number, mainIndex: number) => {\r\n        tree.pointer = mainIndex;\r\n        if (tree.children && tree.children.left) {\r\n            tree.children.left.pointer = leftIndex;\r\n        }\r\n        if (tree.children && tree.children.right) {\r\n            tree.children.right.pointer = rightIndex;\r\n        }\r\n        setTree({ ...treeHead });\r\n        await sleep(timeout);\r\n    }\r\n    const merge = async (arr: number[], leftArr: number[], leftSize: number, rightArr: number[], rightSize: number,\r\n        tree: Tree) => {\r\n        let i = 0, j = 0, k = 0;\r\n        // start animation code\r\n        await setTreePointer(tree, i, j, k);\r\n        //end animation code\r\n        while (i < leftSize && j < rightSize) {\r\n            if (leftArr[i] < rightArr[j]) {\r\n                arr[k++] = leftArr[i++];\r\n                // start animation code\r\n                await setTreePointer(tree, i, j, k);\r\n                //end animation code\r\n            } else {\r\n                arr[k++] = rightArr[j++];\r\n                // start animation code\r\n                await setTreePointer(tree, i, j, k);\r\n                //end animation code\r\n            }\r\n        }\r\n        while (i < leftSize) {\r\n            arr[k++] = leftArr[i++];\r\n            // start animation code\r\n            await setTreePointer(tree, i, j, k);\r\n            //end animation code\r\n        }\r\n        while (j < rightSize) {\r\n            arr[k++] = rightArr[j++];\r\n            // start animation code\r\n            await setTreePointer(tree, i, j, k);\r\n            //end animation code\r\n        }\r\n        // start animation code\r\n        delete tree.children?.left;\r\n        delete tree.children?.right;\r\n        tree.children = null;\r\n        tree.pointer = -1;\r\n        setTree({ ...treeHead });\r\n        await sleep(timeout);\r\n        //end animation code\r\n    }\r\n    const mergeSort = async (arr: number[], size: number, tree: Tree) => {\r\n        // start animation code\r\n        tree.value = arr,\r\n            tree.children = { left: null, right: null };\r\n        setTree({ ...treeHead });\r\n        await sleep(timeout);\r\n        console.log(tree);\r\n        // end animation code\r\n\r\n        if (size < 2) {\r\n            return;\r\n        }\r\n        const mid = Math.round(size / 2);\r\n        const leftArr = arr.slice(0, mid);\r\n        const rightArr = arr.slice(mid, size);\r\n\r\n        // start animation code\r\n        tree.children.left = { value: leftArr, children: null };\r\n        tree.children.right = { value: rightArr, children: null };\r\n        // end animation code\r\n\r\n        await mergeSort(leftArr, mid, tree.children.left);\r\n        await mergeSort(rightArr, size - mid, tree.children.right);\r\n        await merge(arr, leftArr, mid, rightArr, size - mid, tree);\r\n\r\n        // setArray([...arr]);\r\n    }\r\n    const startMergeSort = async () => {\r\n\r\n        setStartedVisualization(true);\r\n        setVisualizationCompleted(false);\r\n        //end animation code\r\n        await mergeSort(arr, arr.length, treeHead);\r\n        console.log(treeHead);\r\n        setVisualizationCompleted(true);\r\n        setStartedVisualization(false);\r\n        //end animation code\r\n    }\r\n\r\n    const generateRandomArr = (size: number) => {\r\n        setVisualizationCompleted(false)\r\n        const newArray: number[] = genRandomArray(size)\r\n        console.log(newArray.length)\r\n        setArray(newArray);\r\n        setTree({ value: newArray, children: null });\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateRandomArr(10)\r\n    }, [])\r\n\r\n    const renderItems = (values: number[], pointer: number) => {\r\n        return (\r\n            <div>\r\n                <div className=\"flex flex-row justify-center items-center\">\r\n                    {\r\n                        values.map((value, index) => (\r\n                            <div className={cx(\"w-10 h-10 flex justify-center items-center border border-gray-900\", {\r\n                                'bg-yellow-600': index === pointer\r\n                            })}\r\n                            >{value}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"flex flex-row justify-center items-center mb-5\">\r\n                    {\r\n                        values.map((value, index) => (\r\n                            <div className=\"w-10 h-10 flex justify-center items-center\">\r\n                                {index === pointer && <ArrowUpwardIcon />}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const renderNode = (tree: Tree) => {\r\n        return (\r\n            <div className=\"col p-3 border border-gray-500 \">\r\n                {renderItems(tree.value, tree.pointer ?? -1)}\r\n                <div className=\"flex justify-center\">\r\n                    {tree.children?.left ? renderNode(tree.children?.left) : null}\r\n                    {tree.children?.right ? renderNode(tree.children?.right) : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderAnimationSteps = () => {\r\n        return renderNode(treeHead);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex justify-start mb-10\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={() => generateRandomArr(10)}\r\n                    className=\"mr-5\"\r\n                    disabled={startedVisualization}\r\n                >\r\n                    Generate Random Array\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={() => startMergeSort()}\r\n                    disabled={startedVisualization}\r\n                >\r\n                    Start Visualize\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"\">\r\n                {renderAnimationSteps()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Header from \"../../components/Header\";\r\nimport { graphql, } from \"gatsby\";\r\nimport { getMarkdownCodeSnippets } from \"../../utils/graghql.util\"\r\nimport SortVisualizerPageCreator from \"../../containers/SortVisualizerPageCreator\"\r\nimport MergeSortVisualizer from \"../../containers/MergeSortVisualizer\"\r\n\r\n\r\nexport default function MergeSortPage({ data }: { data: any }) {\r\n\r\n    const algorithmPath = \"/algorithms/merge-sort\";\r\n    const codeMatch = useMemo(() => {\r\n        return getMarkdownCodeSnippets(data, algorithmPath);\r\n    }, [data]);\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const handleTabChange = (index: number) => setActiveTab(index);\r\n    console.log(codeMatch);\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <SortVisualizerPageCreator\r\n                title=\"Merge Sort Visualizer\"\r\n                code={codeMatch}\r\n                visualizerComponent={\r\n                    <MergeSortVisualizer />\r\n                } />\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMarkdownRemark {\r\n            edges {\r\n                node {\r\n                    html\r\n                    id\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}