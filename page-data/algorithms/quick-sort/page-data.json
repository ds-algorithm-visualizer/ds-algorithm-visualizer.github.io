{"componentChunkName":"component---src-pages-algorithms-quick-sort-tsx","path":"/algorithms/quick-sort/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"\n        <deckgo-highlight-code language=\"java\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">import java.util.Arrays;\n\npublic class MergeSortExample {\n    public void merge(int[] arr, int[] leftArr, int leftSize, int[] rightArr, int rightSize) {\n        int i = 0, j = 0, k = 0;\n        while (i &lt; leftSize &amp;&amp; j &lt; rightSize) {\n            if (leftArr[i] &lt; rightArr[j]) {\n                arr[k++] = leftArr[i++];\n            } else {\n                arr[k++] = rightArr[j++];\n            }\n        }\n        while (i &lt; leftSize) {\n            arr[k++] = leftArr[i++];\n        }\n        while (j &lt; rightSize) {\n            arr[k++] = rightArr[j++];\n        }\n    }\n    public void mergeSort(int[] arr, int size) {\n        if (size &lt; 2) {\n            return;\n        }\n        int mid = Math.round(size / 2);\n\n        int[] leftArr = new int[mid];\n        for (int i = 0; i &lt; mid; i++) {\n            leftArr[i] = arr[i];\n        }\n        int[] rightArr = new int[size - mid];\n        for (int j = 0; j &lt; size - mid; j++) {\n            rightArr[j] = arr[mid + j];\n        }\n\n        mergeSort(leftArr, mid);\n        mergeSort(rightArr, size - mid);\n\n        merge(arr, leftArr, mid, rightArr, size - mid);\n\n    }\n    public void startSorting() {\n        int[] array = {\n            10,\n            8,\n            1,\n            2,\n            9,\n            7,\n            6\n        };\n        mergeSort(array, array.length);\n        System.out.println(Arrays.toString(array));\n    }\n    public static void main(String[] args) {\n        MergeSortExample mergeSortExample = new MergeSortExample();\n        mergeSortExample.startSorting();\n    }\n}</code>\n        </deckgo-highlight-code>\n      ","id":"5fb378a9-e9ab-5e99-bf0b-88fe55cba3ad","excerpt":"","fields":{"slug":"/algorithms/merge-sort/java"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"js\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">function merge(arr, leftArr, leftSize, rightArr, rightSize) {\n    let i = 0, j = 0, k = 0;\n    while (i &lt; leftSize &amp;&amp; j &lt; rightSize) {\n        if (leftArr[i] &lt; rightArr[j]) {\n            arr[k++] = leftArr[i++];\n        } else {\n            arr[k++] = rightArr[j++];\n        }\n    }\n    while (i &lt; leftSize) {\n        arr[k++] = leftArr[i++];\n    }\n    while (j &lt; rightSize) {\n        arr[k++] = rightArr[j++];\n    }\n}\nfunction mergeSort(arr, size) {\n    if (size &lt; 2) {\n        return;\n    }\n    const mid = Math.round(size / 2);\n\n    let leftArr = arr.slice(0, mid);\n    let rightArr = arr.slice(mid, size);\n\n    mergeSort(leftArr, mid);\n    mergeSort(rightArr, size - mid);\n    \n    merge(arr, leftArr, mid, rightArr, size - mid);\n\n}\nfunction startSorting() {\n    const array = [10, 8, 1, 2, 9, 7, 6];\n    mergeSort(array, array.length);\n    console.log(&#39;result&#39;, array);\n}\n\nstartSorting();</code>\n        </deckgo-highlight-code>\n      ","id":"7c136fb0-ead2-543c-97bd-a917246fa4a6","excerpt":"","fields":{"slug":"/algorithms/merge-sort/js"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"python\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">def merge(arr, left_arr, left_size, right_arr, right_size):\n    i = 0\n    j = 0\n    k = 0\n    while i &lt; left_size and j &lt; right_size:\n        if left_arr[i] &lt; right_arr[j]:\n            arr[k] = left_arr[i]\n            k = k + 1\n            i = i + 1\n        else:\n            arr[k] = right_arr[j]\n            k = k + 1\n            j = j + 1\n\n    while i &lt; left_size and k &lt; len(arr):\n        arr[k] = left_arr[i]\n        k = k + 1\n        i = i + 1\n\n    while j &lt; right_size and k &lt; len(arr):\n        arr[k] = right_arr[j]\n        k = k + 1\n        j = j + 1\n\n\ndef merge_sort(arr, size):\n    if size &lt; 2:\n        return;\n\n    mid = round(size / 2)\n\n    left_arr = arr[0:mid]\n    right_arr = arr[mid:size]\n\n    merge_sort(left_arr, mid)\n    merge_sort(right_arr, size - mid)\n\n    merge(arr, left_arr, mid, right_arr, size - mid)\n\n\ndef start_sorting():\n    array = [10, 8, 1, 2, 9, 7, 6]\n    merge_sort(array, len(array))\n    print(array)\n\n\nstart_sorting()</code>\n        </deckgo-highlight-code>\n      ","id":"c3bf7610-892e-5764-a2f6-577464eedbbc","excerpt":"","fields":{"slug":"/algorithms/merge-sort/python"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"typescript\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">function merge(arr:number[], leftArr:number[], leftSize:number, rightArr:number[], rightSize:number) {\n    let i = 0, j = 0, k = 0;\n    while (i &lt; leftSize &amp;&amp; j &lt; rightSize) {\n        if (leftArr[i] &lt; rightArr[j]) {\n            arr[k++] = leftArr[i++];\n        } else {\n            arr[k++] = rightArr[j++];\n        }\n    }\n    while (i &lt; leftSize) {\n        arr[k++] = leftArr[i++];\n    }\n    while (j &lt; rightSize) {\n        arr[k++] = rightArr[j++];\n    }\n}\nfunction mergeSort(arr:number[], size:number) {\n    if (size &lt; 2) {\n        return;\n    }\n    const mid = Math.round(size / 2);\n\n    let leftArr = arr.slice(0, mid);\n    let rightArr = arr.slice(mid, size);\n\n    mergeSort(leftArr, mid);\n    mergeSort(rightArr, size - mid);\n    \n    merge(arr, leftArr, mid, rightArr, size - mid);\n\n}\nfunction startSorting() {\n    const array = [10, 8, 1, 2, 9, 7, 6];\n    mergeSort(array, array.length);\n    console.log(&#39;result&#39;, array);\n}\n\nstartSorting();</code>\n        </deckgo-highlight-code>\n      ","id":"422383d7-66f8-5e9d-9951-ad172cdf17ae","excerpt":"","fields":{"slug":"/algorithms/merge-sort/typescript"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"java\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">import java.util.Arrays;\npublic class QuickSortExample{\npublic void  swap(int[] arr, int left, int right) {\n    int temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n}\npublic int partitionArray(int[] arr,int left,int right) {\n    int pivot = arr[left];\n    int pivotPosition = left;\n    while (left &lt; right) {\n        while (left &lt;= right &amp;&amp; arr[left] &lt;= pivot) {\n            left++;\n        }\n        while (left &lt;= right &amp;&amp; arr[right] &gt; pivot) {\n            right--;\n        }\n        if (left &lt; right) {\n            swap(arr, left, right);\n        }\n    }\n    swap(arr, pivotPosition, right);\n    return right;\n}\npublic void quickSort(int[] arr,int left,int right) {\n    if (left &lt; right) {\n        int partitionPoint = partitionArray(arr, left, right);\n        quickSort(arr, left, partitionPoint-1);\n        quickSort(arr, partitionPoint + 1, right);\n    }\n}\n  public static void main(String[] args){\n     QuickSortExample quickSortExample = new QuickSortExample();\n     int[] array = {10, 8, 1, 2, 9, 7, 6};\n  \t quickSortExample.quickSort(array, 0, array.length - 1);\n  \t System.out.println(Arrays.toString(array));\n  }\n}</code>\n        </deckgo-highlight-code>\n      ","id":"bd985041-5f55-5002-bf08-9a0c4e20309b","excerpt":"","fields":{"slug":"/algorithms/quick-sort/java"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"python\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">def  startSorting(array):\n    quickSort(array, 0, len(array) - 1)\n    print(array)\n    \ndef  quickSort(arr, left, right):\n    if left &lt; right : \n        partitionPoint = partitionArray(arr, left, right)\n        quickSort(arr, left, partitionPoint - 1)\n        quickSort(arr, partitionPoint + 1, right)\n    \ndef  partitionArray(arr, left, right):\n    pivot = arr[left];\n    pivotPosition = left;\n\n    while (left &lt; right):\n        while (left &lt;= right and arr[left] &lt;= pivot):\n            left = left + 1\n\n        while (left &lt;= right and arr[right] &gt; pivot):\n            right = right - 1\n\n        if (left &lt; right):\n            swap(arr, left, right)\n            \n    swap(arr, pivotPosition, right)\n    return right;\n\ndef  swap(arr, left, right):\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    \narray = [10, 8, 1, 2, 9, 7, 6];\nstartSorting(array);</code>\n        </deckgo-highlight-code>\n      ","id":"f9520a5e-74d3-59be-b1a9-403a73d3a0c4","excerpt":"","fields":{"slug":"/algorithms/quick-sort/python"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"js\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">function startSorting(array) {\n    quickSort(array, 0, array.length - 1);\n    console.log(array);\n}\nfunction quickSort(arr, left, right) {\n    if (left &lt; right) {\n        const partitionPoint = partitionArray(arr, left, right);\n        quickSort(arr, left, partitionPoint-1);\n        quickSort(arr, partitionPoint + 1, right);\n    }\n}\n\nfunction partitionArray(arr, left, right) {\n    const pivot = arr[left];\n    const pivotPosition = left;\n    while (left &lt; right) {\n        while (arr[left] &lt;= pivot) {\n            left++;\n        }\n        while (arr[right] &gt; pivot) {\n            right--;\n        }\n        if (left &lt; right) {\n            swap(arr, left, right);\n        }\n    }\n    swap(arr, pivotPosition, right);\n    return right;\n\n}\nfunction swap(arr, left, right) {\n    let temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n}\nconst array = [10, 8, 1, 2, 9, 7, 6];\nstartSorting(array);</code>\n        </deckgo-highlight-code>\n      ","id":"c6802538-61eb-5a8f-8494-850a19b95754","excerpt":"","fields":{"slug":"/algorithms/quick-sort/js"}}},{"node":{"html":"\n        <deckgo-highlight-code language=\"typescript\"  terminal=\"carbon\" theme=\"dracula\" line-numbers=\"true\" >\n          <code slot=\"code\">function startSorting(array:number[]) {\n    quickSort(array, 0, array.length - 1);\n    console.log(array);\n}\nfunction quickSort(arr:number[], left :number, right:number) {\n    if (left &lt; right) {\n        const partitionPoint = partitionArray(arr, left, right);\n        quickSort(arr, left, partitionPoint-1);\n        quickSort(arr, partitionPoint + 1, right);\n    }\n}\n\nfunction partitionArray(arr:number[], left :number, right:number):number {\n    const pivot = arr[left];\n    const pivotPosition = left;\n    while (left &lt; right) {\n        while (arr[left] &lt;= pivot) {\n            left++;\n        }\n        while (arr[right] &gt; pivot) {\n            right--;\n        }\n        if (left &lt; right) {\n            swap(arr, left, right);\n        }\n    }\n    swap(arr, pivotPosition, right);\n    return right;\n\n}\nfunction swap(arr:number[], left :number, right:number) {\n    let temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n}\nconst array = [10, 8, 1, 2, 9, 7, 6];\nstartSorting(array);</code>\n        </deckgo-highlight-code>\n      ","id":"b86d00d5-d221-5bd3-97f5-194987ebabc9","excerpt":"","fields":{"slug":"/algorithms/quick-sort/typescript"}}}]}},"pageContext":{}}}